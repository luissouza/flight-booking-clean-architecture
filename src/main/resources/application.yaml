spring:
  docker:
    compose:
      enabled: true
      readiness:
        timeout: 5m
  cache:
    jcache:
      config: classpath:ehcache.xml

  codec:
    max-in-memory-size=100MB:
  sql.init.mode: always
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://postgres:5432/dockerdb
    username: postgres
    password: password
  jpa:
    properties:
      hibernate:
        boot:
          allow_jdbc_metadata_access=true:
    repositories:
      enabled=true:
    hibernate:
      ddl-auto: update
    show-sql: true
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false
    generate-ddl: true
api:
  services:
    skyPicker:
      baseUrl: https://github.com
      headers: apikey=API_KEY_HERE
      endpoints:
        filter:
          path: /luissouza/flight-booking-clean-architecture/blob/main/assets/json/flights.json
          method: GET
          timeout: 20
          v: 3
        locations:
          path: /luissouza/flight-booking-clean-architecture/blob/main/assets/json/locations.json
          method: GET
          timeout: 20
springdoc:
  api-docs:
    path=/api-docs:
server:
  port : 8085
database:
  default: elasticsearch
elasticsearch:
  url: localhost:9200
resilience4j:
  circuitbreaker:
    instances:
      getFlights:
        registerHealthIndicator: true
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
      getLocation:
        registerHealthIndicator: true
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
  retry:
    instances:
      getFlights:
        maxAttempts: 3
        waitDuration: 2s
      getLocation:
        maxAttempts: 3
        waitDuration: 2s
  timelimiter:
    instances:
      getFlights:
        timeoutDuration: 4s
      getLocation:
        timeoutDuration: 4s
  ratelimiter:
    instances:
      getFlights:
        limit-for-period: 5
        limit-refresh-period: 1s
        timeout-duration: 500ms
      getLocation:
        limit-for-period: 5
        limit-refresh-period: 1s
        timeout-duration: 500ms
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true




